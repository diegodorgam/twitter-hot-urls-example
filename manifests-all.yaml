# Derived from ./manifests
---
apiVersion: v1
kind: Namespace
metadata:
  name: thux---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cleaner
  namespace: thux
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: thux
        component: cleaner
    spec:
      containers:
      - name: cleaner
        image: giantswarm/thux-cleaner
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: frontend
  namespace: thux
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: thux
        component: frontend
    spec:
      containers:
      - name: frontend
        imagePullPolicy: Always
        image: giantswarm/thux-frontend
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: thux
  labels:
    app: thux
    component: frontend
spec:
  type: NodePort
  ports:
  - port: 8000
  selector:
    app: thux
    component: frontend
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-import-dashboards
  namespace: thux
  labels:
    app: grafana
    component: import-dashboards
data:
  thux.json: |
    {
      "dashboard": {
        "__inputs": [
          {
            "name": "DS_PROMETHEUS",
            "label": "prometheus",
            "description": "",
            "type": "datasource",
            "pluginId": "prometheus",
            "pluginName": "Prometheus"
          }
        ],
        "__requires": [
          {
            "type": "panel",
            "id": "graph",
            "name": "Graph",
            "version": ""
          },
          {
            "type": "grafana",
            "id": "grafana",
            "name": "Grafana",
            "version": "3.1.0"
          },
          {
            "type": "datasource",
            "id": "prometheus",
            "name": "Prometheus",
            "version": "1.0.0"
          }
        ],
        "id": null,
        "title": "thux",
        "tags": [],
        "style": "dark",
        "timezone": "browser",
        "editable": true,
        "hideControls": false,
        "sharedCrosshair": false,
        "rows": [
          {
            "collapse": false,
            "editable": true,
            "height": "250px",
            "panels": [
              {
                "aliasColors": {},
                "bars": false,
                "datasource": "${DS_PROMETHEUS}",
                "editable": true,
                "error": false,
                "fill": 1,
                "grid": {
                  "threshold1": null,
                  "threshold1Color": "rgba(216, 200, 27, 0.27)",
                  "threshold2": null,
                  "threshold2Color": "rgba(234, 112, 112, 0.22)"
                },
                "id": 1,
                "isNew": true,
                "legend": {
                  "avg": false,
                  "current": false,
                  "max": false,
                  "min": false,
                  "show": true,
                  "total": false,
                  "values": false,
                  "alignAsTable": true,
                  "rightSide": true
                },
                "lines": true,
                "linewidth": 2,
                "links": [],
                "nullPointMode": "connected",
                "percentage": false,
                "pointradius": 5,
                "points": false,
                "renderer": "flot",
                "seriesOverrides": [],
                "span": 12,
                "stack": false,
                "steppedLine": false,
                "targets": [
                  {
                    "expr": "rate(tracker_processed_tweets_total[1m])",
                    "interval": "",
                    "intervalFactor": 2,
                    "legendFormat": "{{ component }} {{ pod_template_hash }}",
                    "metric": "",
                    "refId": "A",
                    "step": 2
                  },
                  {
                    "expr": "rate(resolver_urls_resolved_total[1m])",
                    "interval": "",
                    "intervalFactor": 2,
                    "legendFormat": "{{ component }} {{ pod_template_hash }}",
                    "metric": "",
                    "refId": "B",
                    "step": 2
                  }
                ],
                "timeFrom": null,
                "timeShift": null,
                "title": "processed_tweets / urls_resolved",
                "tooltip": {
                  "msResolution": true,
                  "shared": true,
                  "sort": 0,
                  "value_type": "cumulative"
                },
                "type": "graph",
                "xaxis": {
                  "show": true
                },
                "yaxes": [
                  {
                    "format": "short",
                    "label": null,
                    "logBase": 1,
                    "max": null,
                    "min": null,
                    "show": true
                  },
                  {
                    "format": "short",
                    "label": null,
                    "logBase": 1,
                    "max": null,
                    "min": null,
                    "show": true
                  }
                ]
              }
            ],
            "title": "Row"
          },
          {
            "collapse": false,
            "editable": true,
            "height": "250px",
            "panels": [
              {
                "aliasColors": {},
                "bars": false,
                "datasource": "${DS_PROMETHEUS}",
                "editable": true,
                "error": false,
                "fill": 1,
                "grid": {
                  "threshold1": null,
                  "threshold1Color": "rgba(216, 200, 27, 0.27)",
                  "threshold2": null,
                  "threshold2Color": "rgba(234, 112, 112, 0.22)"
                },
                "id": 2,
                "isNew": true,
                "legend": {
                  "avg": false,
                  "current": false,
                  "max": false,
                  "min": false,
                  "show": true,
                  "total": false,
                  "values": false,
                  "alignAsTable": true,
                  "rightSide": true
                },
                "lines": true,
                "linewidth": 2,
                "links": [],
                "nullPointMode": "connected",
                "percentage": false,
                "pointradius": 5,
                "points": false,
                "renderer": "flot",
                "seriesOverrides": [],
                "span": 12,
                "stack": false,
                "steppedLine": false,
                "targets": [
                  {
                    "expr": "tracker_processed_last_tweet_duration_seconds",
                    "interval": "",
                    "intervalFactor": 2,
                    "legendFormat": "{{ component }} {{pod_template_hash }}",
                    "metric": "tracker_processed_last_tweet_duration_seconds",
                    "refId": "A",
                    "step": 2
                  },
                  {
                    "expr": "resolver_url_resolve_last_duration_seconds",
                    "interval": "",
                    "intervalFactor": 2,
                    "legendFormat": "{{ component }} {{pod_template_hash }}",
                    "metric": "resolver_url_resolve_last_duration_seconds",
                    "refId": "B",
                    "step": 2
                  }
                ],
                "timeFrom": null,
                "timeShift": null,
                "title": "duration",
                "tooltip": {
                  "msResolution": true,
                  "shared": true,
                  "sort": 0,
                  "value_type": "cumulative"
                },
                "type": "graph",
                "xaxis": {
                  "show": true
                },
                "yaxes": [
                  {
                    "format": "s",
                    "label": null,
                    "logBase": 1,
                    "max": null,
                    "min": null,
                    "show": true
                  },
                  {
                    "format": "short",
                    "label": null,
                    "logBase": 1,
                    "max": null,
                    "min": null,
                    "show": true
                  }
                ]
              }
            ],
            "title": "New row"
          }
        ],
        "time": {
          "from": "now-15m",
          "to": "now"
        },
        "timepicker": {
          "refresh_intervals": [
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
          ],
          "time_options": [
            "5m",
            "15m",
            "1h",
            "6h",
            "12h",
            "24h",
            "2d",
            "7d",
            "30d"
          ]
        },
        "templating": {
          "list": []
        },
        "annotations": {
          "list": []
        },
        "refresh": "5s",
        "schemaVersion": 12,
        "version": 1,
        "links": [],
        "gnetId": null
      },
      "overwrite": true,
      "inputs": [{
        "name": "DS_PROMETHEUS",
        "type": "datasource",
        "pluginId": "prometheus",
        "value": "prometheus"
      }]
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-import-dashboards
  namespace: thux
  labels:
    app: grafana
    component: import-dashboards
spec:
  template:
    metadata:
      name: grafana-import-dashboards
      labels:
        app: grafana
        component: import-dashboards
    spec:
      containers:
      - name: grafana-import-dashboards
        image: giantswarm/tiny-tools
        command: ["/bin/sh", "-c"]
        workingDir: /opt/grafana-import-dashboards
        args:
          - >
            echo 'import dashboard "thux"' &&
            curl --silent --fail --show-error \
              --request POST http://admin:admin@grafana.default.svc:3000/api/dashboards/import \
              --header "Content-Type: application/json" \
              --data-binary @thux.json ;

        volumeMounts:
        - name: config-volume
          mountPath: /opt/grafana-import-dashboards
      restartPolicy: Never
      volumes:
      - name: config-volume
        configMap:
          name: grafana-import-dashboards
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hotlist-redis
  namespace: thux
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: thux
        component: hotlist-redis
        role: master
        # tier: backend
    spec:
      containers:
      - name: hotlist-redis
        image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: hotlist-redis
  namespace: thux
  labels:
    app: thux
    component: hotlist-redis
    # subcomponent: redis?
spec:
  ports:
  - port: 6379
  selector:
    app: thux
    component: hotlist-redis
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: inbox-redis
  namespace: thux
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: thux
        component: inbox-redis
    spec:
      containers:
      - name: thux-inbox-redis
        image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: inbox-redis
  namespace: thux
  labels:
    app: thux
    component: inbox-redis
spec:
  ports:
  - port: 6379
  selector:
    app: thux
    component: inbox-redis
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rebrow
  namespace: thux
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: thux
        component: rebrow
    spec:
      containers:
      - name: thux-rebrow
        image: marian/rebrow:latest
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 5001
---
apiVersion: v1
kind: Service
metadata:
  name: rebrow
  namespace: thux
  labels:
    app: thux
    component: rebrow
spec:
  type: NodePort
  ports:
  - port: 5001
  selector:
    app: thux
    component: rebrow
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: resolver
  namespace: thux
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: thux
        component: resolver
      annotations:
        prometheus.io/scrape: 'true'
        # alpha/target.custom-metrics.podautoscaler.kubernetes.io: '{"items":[{"name":"qps", "value": "10"}]}'
        # metrics.alpha.kubernetes.io/custom-endpoints:
        #   # path: "/metrics",
        #   port: 9102
        #   names: ["myMetric"]
    spec:
      containers:
      - name: resolver
        image: giantswarm/thux-resolver
        # imagePullPolicy: Always
        volumeMounts:
          - name: metrics
            mountPath: /tmp
        # resources:
        #   requests:
        #     cpu: 100m
        #     memory: 100Mi
      - name: metrics
        image: dockermuenster/caddy:0.9
        command:
          - "caddy"
          - "-port=9102"
          - "-root=/var/www"
        ports:
          - containerPort: 9102
          # - hostPort: 9102
            #^ http://kubernetes.io/docs/user-guide/config-best-practices/
            # > Don’t use hostPort unless absolutely necessary, [..]
            # http://guoshimin.github.io/2016/06/03/custom-metrics.html
            # > [..], hence the need for hostPort.
        volumeMounts:
          - name: metrics
            mountPath: /var/www
      volumes:
        - name: metrics
          emptyDir:
            medium: Memory
---
# apiVersion: autoscaling/v1
# kind: HorizontalPodAutoscaler
#   #^ http://kubernetes.io/docs/user-guide/horizontal-pod-autoscaling/
#   # http://guoshimin.github.io/2016/06/03/custom-metrics.html
# metadata:
#   name: resolver-scaler
# spec:
#   scaleTargetRef:
#     kind: ReplicaSet
#     name: resolver
#   minReplicas: 3
#   maxReplicas: 10
#   targetCPUUtilizationPercentage: 50
---
# apiVersion: v1
# kind: Service
# metadata:
#   name: resolver
#   labels:
#     app: thux
#     component: resolver
# spec:
#   type: NodePort
#   ports:
#   - port: 9102
#     nodePort: 30130
#   selector:
#     app: thux
#     component: resolver
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: tracker
  namespace: thux
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: thux
        component: tracker
      annotations:
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: tracker
        image: giantswarm/thux-tracker
        # imagePullPolicy: Always
        env:
        - name: TWITTER_TRACKING_QUERY
          value: http,https
        - name: TWITTER_CONSUMER_KEY
          valueFrom:
            secretKeyRef:
              name: twitter-api
              key: twitter-consumer-key
        - name: TWITTER_CONSUMER_SECRET
          valueFrom:
            secretKeyRef:
              name: twitter-api
              key: twitter-consumer-secret
        - name: TWITTER_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: twitter-api
              key: twitter-access-token
        - name: TWITTER_ACCESS_TOKEN_SECRET
          valueFrom:
            secretKeyRef:
              name: twitter-api
              key: twitter-access-token-secret
        volumeMounts:
          - name: metrics
            mountPath: /tmp
      - name: metrics
        image: dockermuenster/caddy:0.9
        command:
          - "caddy"
          - "-port=9102"
          - "-root=/var/www"
        ports:
          - containerPort: 9102
        volumeMounts:
          - name: metrics
            mountPath: /var/www
      volumes:
        - name: metrics
          emptyDir:
            medium: Memory
